#pragma once
#include<cstdio>
#include<string>

namespace fast_io
{
namespace hacking
{
	
#ifdef _INC_STDIO
inline int filestar_fast_get(std::FILE* fp)
{
	auto &ref(*fp);
	if(ref._cnt)
	{
		--ref._cnt;
		return std::char_traits<char>::to_int_type(*ref._ptr++);
	}
	else
		return fgetc(fp);
}

inline void filestar_fast_put(std::FILE* fp,int ch)
{
	auto &ref(*fp);
	if(ref._cnt)
	{
		*ref._ptr = std::char_traits<char>::to_char_type(ch);
		++ref._ptr;
		--ref._cnt;
	}
	else
		fputc(ch,fp);
}

#elif __struct_FILE_defined 
inline int filestar_fast_get(std::FILE* fp)
{
	auto &ref(*fp);
	if(ref._IO_read_ptr==ref._IO_read_end)
		return fgetc(fp);
	return std::char_traits<char>::to_int_type(ref._IO_read_ptr++);
}

inline void filestar_fast_put(std::FILE* fp,int ch)
{
	auto &ref(*fp);
	if(ref._IO_write_ptr==ref._IO_write_end)
		fputc(ch,fp);
	else
	{
		*ref._IO_write_ptr = std::char_traits<char>::to_char_type(ch);
		++ref._IO_write_ptr;
	}
}
#else
inline int filestar_fast_get(std::FILE* fp)
{
	return fgetc(fp);
}

inline void filestar_fast_put(std::FILE* fp,int ch)
{
	fputc(ch,fp);
}
#endif

}
}