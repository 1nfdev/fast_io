#pragma once
#include<cstdio>
#include<string>

namespace fast_io
{
namespace hacking
{

template<typename T>
inline void filestar_fast_write_raw(std::FILE* fp,T const* first,T const *last)
{
	std::size_t const count(last-first);
	if(std::fwrite(std::addressof(*T),sizeof(begin),count,fp)<count)
		throw std::system_error(errno,std::generic_category());
}

#ifdef _INC_STDIO
inline int filestar_fast_get(std::FILE* fp)
{
	auto &ref(*fp);
	if(ref._cnt)
	{
		--ref._cnt;
		return std::char_traits<char>::to_int_type(*ref._ptr++);
	}
	else
		return fgetc(fp);
}

inline void filestar_fast_put(std::FILE* fp,int ch)
{
	auto &ref(*fp);
	if(ref._cnt)
	{
		*ref._ptr = std::char_traits<char>::to_char_type(ch);
		++ref._ptr;
		--ref._cnt;
	}
	else
		fputc(ch,fp);
}

inline void filestar_fast_write(std::FILE* fp,char const* first,char const* last)
{
	auto &ref(*fp);
	std::size_t const n(bh.end-bh.curr);
	if(n<cend-cbegin)
	{
		std::uninitialized_copy_n(cbegin,n,bh.curr);
		cbegin+=n;
		oh.write(bh.beg,bh.end);
		if(cbegin+Buf::size()<cend)
		{
			oh.write(cbegin,cend);
			bh.curr=bh.beg;
		}
		else
			bh.curr=std::uninitialized_copy(cbegin,cend,bh.beg);
	}
	else
		bh.curr=std::uninitialized_copy(cbegin,cend,bh.curr);
}
#elif __struct_FILE_defined 
inline int filestar_fast_get(std::FILE* fp)
{
	auto &ref(*fp);
	if(ref._IO_read_ptr==ref._IO_read_end)
		return fgetc(fp);
	return std::char_traits<char>::to_int_type(ref._IO_read_ptr++);
}

inline void filestar_fast_put(std::FILE* fp,int ch)
{
	auto &ref(*fp);
	if(ref._IO_write_ptr==ref._IO_write_end)
		fputc(ch,fp);
	else
	{
		*ref._IO_write_ptr = std::char_traits<char>::to_char_type(ch);
		++ref._IO_write_ptr;
	}
}
#else
inline int filestar_fast_get(std::FILE* fp)
{
	return fgetc(fp);
}

inline void filestar_fast_put(std::FILE* fp,int ch)
{
	fputc(ch,fp);
}
/*
template<typename T>
inline int filestar_fast_read(std::FILE* fp,T * first, T *last)
{
	return fgetc(fp);
}*/

template<typename T>
inline void filestar_fast_write(std::FILE* fp,T const* first,T const *last)
{
	filestar_fast_write_raw(fp,first,last);
}
#endif

}
}